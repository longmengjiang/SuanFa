// 实现 pow(x, n) ，即计算 x 的整数 n 次幂函数（即，x^n ）。

 

// 示例 1：
// 输入：x = 2.00000, n = 10
// 输出：1024.00000

// 示例 2：
// 输入：x = 2.10000, n = 3
// 输出：9.26100

// 示例 3：
// 输入：x = 2.00000, n = -2
// 输出：0.25000
// 解释：2^(-2) = 1 / 2^2 = 1 / 4 = 0.25
 

// 提示：

// -100.0 < x < 100.0
// -2^31 <= n <= 2^31 - 1
// n 是一个整数
// 要么 x 不为零，要么 n > 0 。
// -10^4 <= x^n <= 10^4

/**
 * @param {number} x
 * @param {number} n
 * @return {number}
 */
var myPow = function (x, n) {

  // 有负数，先处理特殊情况
  // 如果指数是负数，则 将底数取倒数，并且指数变正
  // 即  x^(-n) = 1 / (x^n) = (1/x)^n
  if (n === 0) return 1.00000
  if (n < 0) {
    x = 1 / x
    n = -n
  }

  let ans = 1

  if (-100.0 > x || x > 100.0) return 0.00000
  if (-(2 ** 31) > n || n > (2 ** 31)) return 0.00000
  if (x === 0 && n > 0) return 0.00000

  while (n) {
    if (n & 1) ans *= x
    x *= x
    n >>>= 1
  }
  return ans
};

console.log(myPow(2.00000, -2)) // 0.25000
console.log(myPow(1.00000, 2147483648)) // n = 2^31，临界值，特殊处理
console.log(myPow(1.00000, -2147483648)) // n = -2^31，临界值，特殊处理 
console.log(myPow(2, 31)) // -2147483648


